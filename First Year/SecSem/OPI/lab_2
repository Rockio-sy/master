## Task_1:
# Как выполнить задачу с использованием GitLab

## Шаг 1: Создание локального репозитория
1. Создайте локальную копию репозитория на вашей машине с помощью команды:
   ```
   git clone https://git.iu7.bmstu.ru/iu7-software-engineering/iu7-software-engineering-labs-2024/iu7-software-engineering-labs-2024-tarekchawich.git
   ```
   Это создаст локальную копию репозитория на вашей машине.

## Шаг 2: Создание файла .gitignore
1. Создайте файл `.gitignore`, используя файл из предыдущей лабораторной работы в качестве основы. При необходимости внесите изменения в соответствии с вашими требованиями.
2. Поместите файл `.gitignore` под версионный контроль с помощью команды `git add .gitignore` и выполните коммит с комментарием, например: `git commit -m "Добавлен файл .gitignore"`.

## Шаг 3: Копирование файлов лабораторной работы
1. Скопируйте файлы лабораторной работы в рабочую директорию в соответствии с вашим вариантом.
2. Убедитесь, что программа работает, после чего поместите исходный код под версионный контроль с помощью команды `git add .` и выполните коммит с комментарием, например: `git commit -m "Добавлен исходный код лабораторной работы"`.

## Шаг 4: Создание ветки для исправления ошибки
1. Создайте отдельную ветку для исправления ошибки с помощью команды `git branch fix`.
2. Переключитесь на ветку fix с помощью команды `git checkout fix`.

## Шаг 5: Добавление комментариев к исходному коду
1. Изучите исходный код программы, помещенной под версионный контроль.
2. Добавьте комментарии, описывающие назначение функций программы.
3. Поместите изменения под версионный контроль с помощью команды `git add .` и выполните коммит с комментарием, например: `git commit -m "Добавлены комментарии к коду"`.

## Шаг 6: Добавление теста, демонстрирующего ошибку
1. Добавьте тест, который демонстрирует наличие ошибки в программе.
2. Поместите изменения под версионный контроль с помощью команды `git add .` и выполните коммит с комментарием

, например: `git commit -m "Добавлен тест на ошибку"`.

## Шаг 7: Создание issue
1. Создайте issue, в котором опишите ошибку.
2. Укажите "номер" ревизии, в которой был добавлен тест, демонстрирующий наличие ошибки.

## Шаг 8: Исправление ошибки
1. Исправьте ошибку в программе.
2. Зафиксируйте изменения, указав номер issue в комментарии к коммиту, например: `git commit -m "Исправлена ошибка, связанная с #123"`.

## Шаг 9: Описание изменений в issue
1. В issue опишите суть сделанных изменений.
2. Укажите "номер" ревизии, в которой ошибка была исправлена.

## Шаг 10: Объединение изменений в ветку master
1. Переключитесь на ветку master с помощью команды `git checkout master`.
2. Выполните объединение изменений с веткой fix с помощью команды `git merge fix`.
3. При возникновении конфликта разрешите его вручную, затем выполните команды `git add .` и `git commit` для завершения объединения.

## Шаг 11: Закрытие issue
1. В issue укажите "номер" ревизии, в которой исправления были перенесены из ветки fix в ветвь master.
2. Закройте issue.

## Шаг 12: Анализ истории изменений
1. Выполните команду `git log --oneline --graph --all` для анализа истории изменений в вашем репозитории.
2. Проанализируйте изменения и объясните, почему не было конфликта при объединении изменений.

Если у вас возникнут вопросы или потребуется дополнительная помощь, пожалуйста, сообщите мне.

## Task_2:
# Анализ и объединение изменений в репозитории

## Шаг 1: Распаковка репозитория
1. Склонируйте репозиторий на локальную машину с помощью команды:
   ```
   git clone https://git.iu7.bmstu.ru/iu7-software-engineering/iu7-software-engineering-labs-2023/iu7-software-engineering-labs-2023-tarekchawich.git
   ```
   Это создаст локальную копию репозитория на вашей машине.

## Шаг 2: Анализ истории изменений
1. Проверка веток:
   ```
   cd iu7-software-engineering-labs-2023-tarekchawich
   git branch
   ```
   Эта команда отобразит список веток в репозитории и их названия.

2. Проверка пользователей:
   ```
   git log --format='%an' | sort -u
   ```
   Эта команда покажет список пользователей, которые вносили изменения в репозиторий.

3. Проверка файлов и их истории изменений:
   ```
   git ls-tree --name-only -r HEAD | wc -l
   git log --follow --format="%an" --name-only --pretty=format: | sort | uniq -c
   ```
   Первая команда покажет общее количество файлов в репозитории, а вторая команда покажет историю изменений каждого файла вместе с соответствующим пользователем.

## Шаг 3: Объединение изменений в ветвь master
Чтобы объединить изменения из всех веток в ветвь master, используйте следующие команды:

1. Переключитесь на ветку master:
   ```
   git checkout master
   ```

2. Объедините изменения из каждой ветки с помощью команды:
   ```
   git merge branch1
   git merge branch2
   # Повторите эту команду для каждой ветки
   ```
   Замените `branch1`, `branch2` и т.д. на фактические названия веток в вашем репозитории.

Если в процессе объединения изменений возникают конфликты, Git приостанавливается и отображает конфликтующие участки в соответствующих файлах. Вам потребуется вручную разрешить эти конфликты. После разрешения конфликтов выполните следующую команду, чтобы продолжить объединение:

   ```
   git add .
   git commit
   ```

Повторите эти шаги для каждой ветки до того момента, пока все изменения не будут объед

инены в ветку master.

Если у вас возникнут вопросы или потребуется дополнительная помощь, пожалуйста, сообщите мне.
Task3:
#3_1:
Выполнение данной задачи предполагает выполнение следующих шагов:

## Шаг 1: Создание ветви с именем "lab_01_06"
1. Перейдите в локальный репозиторий с помощью команды `cd lab_02_a`.
2. Создайте ветвь с именем "lab_01_06" с помощью команды `git branch lab_01_06`.
3. Переключитесь на ветвь "lab_01_06" с помощью команды `git checkout lab_01_06`.

## Шаг 2: Помещение исходного кода решенных задач в ветвь "lab_01_06"
1. Поместите исходный код решенных задач в рабочую директорию вашего локального репозитория.
2. Выполните команду `git add .` для добавления изменений под версионный контроль.
3. Выполните команду `git commit -m "Добавлен исходный код решенных задач"` для фиксации изменений.

## Шаг 3: Отправка изменений в удаленный репозиторий
1. Отправьте изменения в удаленный репозиторий с помощью команды `git push origin lab_01_06`.

## Шаг 4: Создание Merge Request
1. Перейдите на веб-интерфейс GitLab и откройте ваш репозиторий.
2. Создайте новый Merge Request, указав исходную ветвь "lab_01_06" и целевую ветвь "master".
3. Заполните необходимую информацию и отправьте Merge Request.

Пожалуйста, предоставьте ссылку на созданный Merge Request для включения его в отчет.
#3_2:

## Шаг 1: Получение копии удаленного репозитория
1. Склонируйте удаленный репозиторий на свой локальный компьютер с помощью команды `git clone <URL_удаленного_репозитория>`.
2. Перейдите в рабочую директорию с помощью команды `cd <название_папки_репозитория>`.

## Шаг 2: Создание ветвей lab_02_a и lab_02_b
1. Создайте ветвь lab_02_a на основе ветви master с помощью команды `git branch lab_02_a master`.
2. Создайте ветвь lab_02_b на основе ветви master с помощью команды `git branch lab_02_b master`.

## Шаг 3: Переключение на ветвь lab_02_a
1. Переключитесь на ветвь lab_02_a с помощью команды `git checkout lab_02_a`.

## Шаг 4: Добавление файлов под версионный контроль в ветви lab_02_a
1. Создайте текстовый файл lab_02_a.txt, содержащий текст "lab_02_a".
2. Создайте файл .gitignore, который будет игнорировать исполняемые файлы.
3. Выполните команду `git add .` для добавления файлов под версионный контроль.
4. Выполните команду `git commit -m "Добавлены файлы lab_02_a.txt и .gitignore"` для фиксации изменений.

## Шаг 5: Отправка изменений в удаленный репозиторий и создание merge request A
1. Отправьте изменения в удаленный репозиторий с помощью команды `git push origin lab_02_a`.
2. Создайте merge request A на веб-интерфейсе GitLab, указав ветвь lab_02_a как исходную и ветвь master как целевую.
3. Отправьте merge request A для рассмотрения.

## Шаг 6: Переключение на ветвь lab_02_b
1. Переключитесь на ветвь lab_02_b с помощью команды `git checkout lab_02_b`.

## Шаг 7: Добавление файлов под версионный контроль в ветви lab_02_b
1. Создайте текстовый файл lab_02_b.txt, содержащий текст "lab_02_b".
2. Создайте файл .gitignore, который будет игнорировать объектные файлы.
3. Выполните команду `git add .` для добавления файлов под версионный контроль.
4. Выполните команду `git commit -m "Добавлены файлы lab_02_b.txt и .git

ignore"` для фиксации изменений.

## Шаг 8: Отправка изменений в удаленный репозиторий и создание merge request B
1. Отправьте изменения в удаленный репозиторий с помощью команды `git push origin lab_02_b`.
2. Создайте merge request B на веб-интерфейсе GitLab, указав ветвь lab_02_b как исходную и ветвь master как целевую.
3. Отправьте merge request B для рассмотрения.

## Шаг 9: Подтверждение merge request B преподавателем
1. Попросите преподавателя принять merge request B на веб-интерфейсе GitLab.

## Шаг 10: Анализ состояния merge request A и разрешение конфликта
1. После принятия merge request B преподавателем, проанализируйте состояние merge request A на веб-интерфейсе GitLab.
2. Объясните причину возникновения конфликта в merge request A.
3. Разрешите конфликт, следуя инструкциям на веб-интерфейсе GitLab.

Пожалуйста, обратитесь к преподавателю для подтверждения merge request B и выполнения разрешения конфликта в merge request A.
#3_3:
# Лабораторная работа 2: Работа с ветвями и разрешение конфликтов

Цель данной лабораторной работы - выполнить ряд действий с использованием ветвей и разрешить конфликты при работе с удаленным репозиторием. В отчете необходимо привести подробные ответы только для пунктов 11 и 12, а также описать последовательность действий во времени.

## Подготовка
1. Получите копию удаленного репозитория.
2. Перейдите в рабочую директорию.

## Шаг 1: Создание ветви lab_02_c
1. На основе ветви master создайте новую ветвь lab_02_c с помощью команды `git branch lab_02_c`.
2. Переключитесь на ветвь lab_02_c с помощью команды `git checkout lab_02_c`.

## Шаг 2: Добавление текстового файла и отправка изменений
1. Добавьте под версионный контроль текстовый файл, который должен содержать абзац #1 текста.
2. Зафиксируйте изменения в локальном репозитории с помощью команды `git commit -m "Add paragraph #1"`.
3. Отправьте изменения в удаленный репозиторий с помощью команды `git push origin lab_02_c`.

## Шаг 3: Добавление абзаца #3 и создание конфликта
1. Добавьте в текстовый файл абзац #3, но не фиксируйте и не отправляйте изменения в удаленный репозиторий.

## Шаг 4: Клонирование удаленного репозитория
1. Склонируйте удаленный репозиторий в другую директорию, получая тем самым еще одну копию удаленного репозитория.
2. Перейдите в склонированную директорию.

## Шаг 5: Добавление абзаца #2 и отправка изменений
1. Переключитесь на ветвь lab_02_c с помощью команды `git checkout lab_02_c`.
2. Добавьте в текстовый файл абзац #2, вставив его после абзаца #1.
3. Зафиксируйте изменения в локальном репозитории с помощью команды `git commit -m "Add paragraph #2"`.
4. Отправьте изменения в удаленный репозиторий с помощью команды `git push origin lab_02_c`.

## Шаг 6: Попытка отправить изменения в удаленный репоз

иторий
1. Перейдите в первую копию удаленного репозитория.
2. Попытайтесь отправить изменения в удаленный репозиторий с помощью команды `git push origin lab_02_c`.
3. Объясните, почему отправка изменений не удалась.

## Шаг 7: Разрешение конфликта
1. Разрешите конфликт, возникший в ветви lab_02_c. Воспользуйтесь соответствующими инструментами для разрешения конфликтов в текстовом файле.
2. Зафиксируйте изменения в локальном репозитории после разрешения конфликта.
3. Отправьте изменения в удаленный репозиторий с помощью команды `git push origin lab_02_c`.

## История изменений и комментарии
- T0: Получена копия удаленного репозитория.
- T1: Перешли в рабочую директорию.
- T2: Создана ветвь lab_02_c на основе ветви master.
- T3: Добавлен текстовый файл с абзацем #1.
- T4: Изменения отправлены в удаленный репозиторий.
- T5: В текстовый файл добавлен абзац #3, но изменения не отправлены в удаленный репозиторий.
- T6: Склонирован удаленный репозиторий в другую директорию.
- T7: Переключение на ветвь lab_02_c во второй копии репозитория.
- T8: В текстовый файл во второй копии добавлен абзац #2.
- T9: Изменения отправлены в удаленный репозиторий.
- T10: Переход в первую копию удаленного репозитория.
- T11: Попытка отправить изменения в удаленный репозиторий не удалась из-за конфликта.
- T12: Разрешение конфликта и зафиксирование изменений в локальном репозитории.
- T13: Изменения отправлены в удаленный репозиторий после разрешения конфликта.

## Ссылки
- Ссылка на созданный merge request: [ссылка](ссылка на merge request)

# конфликт
Когда возникает конфликт при объединении изменений из разных ветвей, Git создает специальные маркеры, которые помечают конфликтующие разделы в файле. Я выполнил правильные действия для разрешения конфликта, используя команду 'git mergetool`.

Когда я запускаю `git mergetool`, Git открывает визуальный редактор для отображения конфликтующих изменений. В этом редакторе я могу просматривать и редактировать содержимое конфликтующих разделов, чтобы выбрать, какие изменения следует сохранить в окончательной версии.

После внесения необходимых изменений и сохранения файла Get будет считать конфликт разрешенным. Затем я могу добавить измененный файл в индекс с помощью команды "git add" и зафиксировать, чтобы сохранить изменения в репозитории.

моих шагов по разрешению конфликта и отправке измененного файла в репозиторий должно быть достаточно, чтобы сохранить выбранные изменения в окончательной версии.
